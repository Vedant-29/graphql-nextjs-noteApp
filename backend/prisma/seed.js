const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function main() {
  console.log('üå± Starting database seeding...');

  // Clear existing data
  await prisma.note.deleteMany({});
  console.log('üßπ Cleared existing notes');

  // Comprehensive seed data
  const seedNotes = [
    {
      title: "GraphQL Fundamentals",
      content: "GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. Unlike REST APIs, GraphQL gives clients the power to ask for exactly what they need and nothing more. Key concepts:\n\n‚Ä¢ Single endpoint for all operations\n‚Ä¢ Strong type system\n‚Ä¢ Queries, Mutations, and Subscriptions\n‚Ä¢ Resolver functions handle data fetching\n‚Ä¢ Schema-first development approach"
    },
    {
      title: "React Hooks Best Practices",
      content: "Essential patterns for using React hooks effectively:\n\n1. useState: For component state management\n2. useEffect: For side effects and lifecycle events\n3. useContext: For sharing data across components\n4. useCallback: Memoize functions to prevent re-renders\n5. useMemo: Memoize expensive calculations\n6. Custom hooks: Extract and reuse stateful logic\n\nRemember: Only call hooks at the top level, never inside loops, conditions, or nested functions."
    },
    {
      title: "Database Design Principles",
      content: "Key principles for effective database design:\n\n‚Ä¢ Normalization: Eliminate data redundancy\n‚Ä¢ Primary Keys: Unique identifier for each record\n‚Ä¢ Foreign Keys: Maintain referential integrity\n‚Ä¢ Indexing: Improve query performance\n‚Ä¢ ACID Properties: Atomicity, Consistency, Isolation, Durability\n‚Ä¢ Schema Evolution: Plan for future changes\n\nFor PostgreSQL specifically:\n‚Ä¢ Use appropriate data types (UUID, JSONB, etc.)\n‚Ä¢ Leverage constraints for data validation\n‚Ä¢ Consider partitioning for large tables"
    },
    {
      title: "Apollo Client Cache Management",
      content: "Apollo Client's InMemoryCache is powerful but requires understanding:\n\n‚Ä¢ Normalized Caching: Objects stored by __typename and id\n‚Ä¢ Cache Policies: cache-first, network-only, cache-and-network\n‚Ä¢ Optimistic Updates: Update UI before server response\n‚Ä¢ Cache.modify(): Manually update cached data\n‚Ä¢ Refetch Queries: Refresh data when needed\n‚Ä¢ Field Policies: Custom cache behavior per field\n\nBest practices:\n- Use consistent ID fields\n- Implement proper error handling\n- Leverage optimistic responses for better UX"
    },
    {
      title: "TypeScript Advanced Types",
      content: "Powerful TypeScript features for better type safety:\n\n‚Ä¢ Generic Types: Reusable type definitions\n‚Ä¢ Union Types: Value can be one of several types\n‚Ä¢ Intersection Types: Combine multiple types\n‚Ä¢ Mapped Types: Transform existing types\n‚Ä¢ Conditional Types: Types that depend on conditions\n‚Ä¢ Utility Types: Pick, Omit, Partial, Required\n‚Ä¢ Template Literal Types: String manipulation at type level\n\nExample:\ntype APIResponse<T> = {\n  data: T;\n  error?: string;\n  loading: boolean;\n}"
    },
    {
      title: "Next.js App Router Guide",
      content: "Next.js 13+ App Router introduces new patterns:\n\n‚Ä¢ File-based routing in /app directory\n‚Ä¢ Server Components by default\n‚Ä¢ Client Components with 'use client'\n‚Ä¢ Layouts for shared UI\n‚Ä¢ Loading and Error boundaries\n‚Ä¢ Parallel and Intercepting routes\n‚Ä¢ Server Actions for form handling\n\nKey differences from Pages Router:\n- Nested layouts\n- Streaming and Suspense\n- Built-in SEO improvements\n- Better TypeScript integration"
    },
    {
      title: "Prisma ORM Features",
      content: "Prisma provides excellent developer experience:\n\n‚Ä¢ Type-safe database access\n‚Ä¢ Auto-generated client from schema\n‚Ä¢ Database migrations\n‚Ä¢ Introspection of existing databases\n‚Ä¢ Query optimization and batching\n‚Ä¢ Connection pooling\n‚Ä¢ Multiple database support\n\nUseful commands:\n- prisma generate: Update client\n- prisma db push: Sync schema (dev)\n- prisma migrate dev: Create migration\n- prisma studio: Visual database editor\n- prisma db seed: Run seed scripts"
    },
    {
      title: "CSS Grid vs Flexbox",
      content: "When to use Grid vs Flexbox:\n\n**CSS Grid (2D Layout):**\n‚Ä¢ Complex layouts with rows and columns\n‚Ä¢ Card layouts and dashboards\n‚Ä¢ Magazine-style designs\n‚Ä¢ When you need precise control over both axes\n\n**Flexbox (1D Layout):**\n‚Ä¢ Navigation bars\n‚Ä¢ Centering content\n‚Ä¢ Distribution of space in one direction\n‚Ä¢ Component-level layouts\n‚Ä¢ When content size determines layout\n\nOften used together: Grid for page layout, Flexbox for components."
    },
    {
      title: "API Security Best Practices",
      content: "Essential security measures for APIs:\n\n‚Ä¢ Authentication: JWT tokens, OAuth, API keys\n‚Ä¢ Authorization: Role-based access control (RBAC)\n‚Ä¢ Input Validation: Sanitize and validate all inputs\n‚Ä¢ Rate Limiting: Prevent abuse and DoS attacks\n‚Ä¢ HTTPS Everywhere: Encrypt data in transit\n‚Ä¢ CORS Configuration: Control cross-origin requests\n‚Ä¢ SQL Injection Prevention: Use parameterized queries\n‚Ä¢ Logging and Monitoring: Track suspicious activity\n\nFor GraphQL specifically:\n‚Ä¢ Query depth limiting\n‚Ä¢ Query complexity analysis\n‚Ä¢ Disable introspection in production"
    },
    {
      title: "Git Workflow Strategies",
      content: "Popular Git workflows for team development:\n\n**GitFlow:**\n‚Ä¢ Main branches: main, develop\n‚Ä¢ Feature branches for new work\n‚Ä¢ Release branches for deployments\n‚Ä¢ Hotfix branches for urgent fixes\n\n**GitHub Flow:**\n‚Ä¢ Single main branch\n‚Ä¢ Feature branches with pull requests\n‚Ä¢ Deploy from main branch\n‚Ä¢ Simpler than GitFlow\n\n**Best Practices:**\n‚Ä¢ Atomic commits with clear messages\n‚Ä¢ Regular rebasing to keep history clean\n‚Ä¢ Protect main branch with required reviews\n‚Ä¢ Use conventional commit messages"
    },
    {
      title: "Performance Optimization Techniques",
      content: "Frontend performance optimization strategies:\n\n**Loading Performance:**\n‚Ä¢ Code splitting and lazy loading\n‚Ä¢ Image optimization (WebP, proper sizing)\n‚Ä¢ CDN usage for static assets\n‚Ä¢ Preloading critical resources\n‚Ä¢ Bundle analysis and tree shaking\n\n**Runtime Performance:**\n‚Ä¢ Memoization (React.memo, useMemo)\n‚Ä¢ Virtual scrolling for large lists\n‚Ä¢ Debouncing user inputs\n‚Ä¢ Efficient re-rendering patterns\n\n**Measuring Performance:**\n‚Ä¢ Lighthouse audits\n‚Ä¢ Web Vitals (LCP, FID, CLS)\n‚Ä¢ Browser DevTools profiling"
    },
    {
      title: "Docker Development Setup",
      content: "Using Docker for consistent development environments:\n\n**Dockerfile Best Practices:**\n‚Ä¢ Multi-stage builds for smaller images\n‚Ä¢ Layer caching optimization\n‚Ä¢ Non-root user for security\n‚Ä¢ .dockerignore for faster builds\n\n**Docker Compose for Full Stack:**\n‚Ä¢ Database service (PostgreSQL)\n‚Ä¢ Backend API service\n‚Ä¢ Frontend development server\n‚Ä¢ Volume mounts for hot reloading\n‚Ä¢ Environment variable management\n‚Ä¢ Network configuration\n\n**Development Benefits:**\n‚Ä¢ Consistent environment across team\n‚Ä¢ Easy onboarding for new developers\n‚Ä¢ Isolated dependencies"
    }
  ];

  console.log(`üìù Creating ${seedNotes.length} notes...`);

  // Create notes with slight delay to ensure different createdAt times
  for (let i = 0; i < seedNotes.length; i++) {
    const note = seedNotes[i];
    await prisma.note.create({
      data: {
        title: note.title,
        content: note.content,
      },
    });
    
    // Small delay to create different timestamps
    await new Promise(resolve => setTimeout(resolve, 10));
    
    if ((i + 1) % 3 === 0) {
      console.log(`‚úÖ Created ${i + 1}/${seedNotes.length} notes`);
    }
  }

  console.log('üéâ Database seeding completed successfully!');
  console.log('\nüìä Summary:');
  console.log(`‚Ä¢ ${seedNotes.length} notes created`);
  console.log('‚Ä¢ Topics covered: GraphQL, React, TypeScript, Next.js, Prisma, and more');
  console.log('‚Ä¢ Ready for testing your GraphQL queries and mutations!');
  
  // Display first few notes as confirmation
  const createdNotes = await prisma.note.findMany({
    take: 3,
    orderBy: { createdAt: 'desc' },
    select: { id: true, title: true, createdAt: true }
  });
  
  console.log('\nüîç Sample of created notes:');
  createdNotes.forEach(note => {
    console.log(`‚Ä¢ ${note.title} (ID: ${note.id.substring(0, 8)}...)`);
  });
}

main()
  .catch((e) => {
    console.error('‚ùå Error during seeding:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
    console.log('üîå Database connection closed');
  });